import { fetchBitcoinDifficulty } from "@/lib/services/bitcoinDifficulty";

// Miner model interface and constants
interface MinerModel {
  name: string;
  hashrate: number; // TH/s
  power: number;    // Watts
}

export const MINER_MODELS = {
  S9: {
    name: "Antminer S9",
    hashrate: 13.5,
    power: 1323
  },
  S19J_PRO: {
    name: "Antminer S19j Pro",
    hashrate: 100,
    power: 3050
  },
  M20S: {
    name: "Whatsminer M20S",
    hashrate: 68,
    power: 3360
  }
} as const;

// Bitcoin network constants
const BLOCK_REWARD = 3.125; // Current block reward
const SETTLEMENT_PERIOD_MINUTES = 30; // Each settlement period is 30 minutes
const BLOCKS_PER_SETTLEMENT_PERIOD = 3; // 3 blocks per 30 minutes (1 block every 10 minutes)

/**
 * Calculate potential BTC mined from curtailed energy using dynamic network difficulty
 * @param curtailedMwh - Curtailed energy in MWh for a 30-minute settlement period
 * @param date - Optional date for historical calculations
 * @param minerModel - Miner model to use for calculations (defaults to S19J_PRO)
 * @returns Potential BTC that could be mined in the 30-minute settlement period
 */
export async function calculatePotentialBtc(
  curtailedMwh: number,
  date?: Date,
  minerModel: keyof typeof MINER_MODELS = 'S19J_PRO'
): Promise<number> {
  const miner = MINER_MODELS[minerModel];

  // Convert MWh to kWh
  const curtailedKwh = curtailedMwh * 1000;

  // Each miner consumes power in kWh per settlement period (30 minutes)
  const minerConsumptionKwh = (miner.power / 1000) * (SETTLEMENT_PERIOD_MINUTES / 60);

  // How many miners can be powered for the settlement period with the given curtailed energy?
  const potentialMiners = Math.floor(curtailedKwh / minerConsumptionKwh);

  // Fetch current network difficulty
  const networkDifficulty = await fetchBitcoinDifficulty(date);

  // Calculate expected hashes to find a block from difficulty
  // Difficulty represents how many hashes on average needed to find a block
  // compared to the base difficulty of 1 which requires 2^32 hashes
  const hashesPerBlock = networkDifficulty * Math.pow(2, 32);

  // Calculate network hashrate in hashes per second
  // Average block time is 600 seconds (10 minutes)
  const networkHashRate = hashesPerBlock / 600;

  // Convert to TH/s for consistency with miner hashrate
  const networkHashRateTH = networkHashRate / 1e12;

  // Total hash power from our miners in TH/s
  const totalHashPower = potentialMiners * miner.hashrate;

  // Calculate probability of finding a block
  const ourNetworkShare = totalHashPower / networkHashRateTH;

  // Estimate BTC mined per settlement period (30 minutes)
  // We expect to find (ourNetworkShare * BLOCKS_PER_SETTLEMENT_PERIOD) blocks per period
  const btcPerSettlementPeriod = ourNetworkShare * BLOCK_REWARD * BLOCKS_PER_SETTLEMENT_PERIOD;

  return btcPerSettlementPeriod;
}