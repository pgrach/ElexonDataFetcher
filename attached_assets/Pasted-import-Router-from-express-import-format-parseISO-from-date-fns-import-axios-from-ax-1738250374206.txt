import { Router } from 'express';
import { format, parseISO } from 'date-fns';
import axios from 'axios';

const router = Router();

async function fetchFromMinerstat(): Promise<{ difficulty: number; price: number }> {
  try {
    const response = await axios.get('https://api.minerstat.com/v2/coins?list=BTC');
    const { difficulty, price } = response.data[0];

    if (!difficulty || !price) {
      throw new Error('Data not found in minerstat response');
    }

    return { difficulty, price };
  } catch (error) {
    console.error('Error fetching from minerstat:', error);
    throw new Error('Failed to fetch data from minerstat');
  }
}

router.get('/price', async (req, res) => {
  try {
    const requestDate = req.query.date ? parseISO(req.query.date as string) : new Date();
    const targetDate = format(requestDate, 'yyyy-MM-dd');
    const today = format(new Date(), 'yyyy-MM-dd');

    console.log('Price request details:', {
      requestDate: requestDate.toISOString(),
      targetDate,
      today,
      isHistorical: targetDate !== today
    });

    // Temporarily use minerstat for all dates since DynamoDB is not available
    console.log('Fetching current price from minerstat');
    const { price } = await fetchFromMinerstat();

    res.json({
      date: targetDate,
      price,
      source: 'minerstat'
    });
  } catch (error) {
    console.error('Error in price endpoint:', error);
    res.status(500).json({ 
      error: 'Failed to fetch price data',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

router.get('/difficulty', async (req, res) => {
  try {
    const targetDate = req.query.date ? 
      format(parseISO(req.query.date as string), 'yyyy-MM-dd') :
      format(new Date(), 'yyyy-MM-dd');

    // Use minerstat for difficulty data
    const { difficulty } = await fetchFromMinerstat();

    res.json({
      date: targetDate,
      difficulty,
      source: 'minerstat'
    });
  } catch (error) {
    console.error('Error fetching difficulty:', error);
    res.status(500).json({ 
      error: 'Failed to fetch difficulty data',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

export default router;